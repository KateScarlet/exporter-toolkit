// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: pb/NodeService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NodeService_UploadFile_FullMethodName   = "/pb.NodeService/UploadFile"
	NodeService_DownloadFile_FullMethodName = "/pb.NodeService/DownloadFile"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (NodeService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (NodeService_DownloadFileClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (NodeService_UploadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], NodeService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceUploadFileClient{ClientStream: stream}
	return x, nil
}

type NodeService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileStatus, error)
	grpc.ClientStream
}

type nodeServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *nodeServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeServiceUploadFileClient) CloseAndRecv() (*UploadFileStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (NodeService_DownloadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[1], NodeService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceDownloadFileClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_DownloadFileClient interface {
	Recv() (*DownloadFileStatus, error)
	grpc.ClientStream
}

type nodeServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *nodeServiceDownloadFileClient) Recv() (*DownloadFileStatus, error) {
	m := new(DownloadFileStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	UploadFile(NodeService_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, NodeService_DownloadFileServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) UploadFile(NodeService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedNodeServiceServer) DownloadFile(*DownloadFileRequest, NodeService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServiceServer).UploadFile(&nodeServiceUploadFileServer{ServerStream: stream})
}

type NodeService_UploadFileServer interface {
	SendAndClose(*UploadFileStatus) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type nodeServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *nodeServiceUploadFileServer) SendAndClose(m *UploadFileStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).DownloadFile(m, &nodeServiceDownloadFileServer{ServerStream: stream})
}

type NodeService_DownloadFileServer interface {
	Send(*DownloadFileStatus) error
	grpc.ServerStream
}

type nodeServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *nodeServiceDownloadFileServer) Send(m *DownloadFileStatus) error {
	return x.ServerStream.SendMsg(m)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _NodeService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _NodeService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/NodeService.proto",
}
